#include <ros/ros.h>
#include <nav_msgs/Odometry.h>
#include <sensor_msgs/LaserScan.h>
#include <tf/tf.h>
#include <tf/transform_broadcaster.h>

static nav_msgs::Odometry odom;
static sensor_msgs::LaserScan scan;

static bool odomFlag=false;
static bool scanFlag=false;

void odomCallback(const nav_msgs::Odometry &data){
  odom=data;
  odomFlag=true;

  tf::TransformBroadcaster br;
  tf::StampedTransform transform;
  tf::Quaternion q;
  transform.stamp_= ros::Time::now();
  transform.frame_id_="laser";
  transform.child_frame_id_="laser_transform";
  tf::Vector3 v = tf::Vector3(odom.pose.pose.position.x,odom.pose.pose.position.y,
                odom.pose.pose.position.z);
  transform.setOrigin(v);
  q.setW(odom.pose.pose.orientation.w);
  q.setX(odom.pose.pose.orientation.x);
  q.setY(odom.pose.pose.orientation.y);
  q.setZ(odom.pose.pose.orientation.z);
  transform.setRotation(q);
  br.sendTransform(transform);
}

void scanCallback(const sensor_msgs::LaserScan &data){
  scan=data;
  scanFlag=true;
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "LR4_node");
  ros::NodeHandle nh;
  ros::Subscriber subOdom = nh.subscribe("odom",1000,odomCallback);
  ros::Subscriber subScan = nh.subscribe("base_scan",1000,scanCallback);
  ros::Publisher pub = nh.advertise<sensor_msgs::LaserScan>("tf_scan",1000);
  tf::TransformBroadcaster br;
  tf::StampedTransform transform;
  tf::Quaternion q;
  
  ros::Rate r(10.0);
  while (ros::ok()) {
    if(scanFlag ==true){
//      double yaw, pitch, roll;
//      tf::Matrix3x3 mat(q);
//      mat.getEulerYPR(yaw, pitch, roll);
//      tf::Vector3 v = tf::Vector3(odom.pose.pose.position.x,odom.pose.pose.position.y,
//                                  odom.pose.pose.position.z);
//      transform.setOrigin(v);
//      q.setW(odom.pose.pose.orientation.w);
//      q.setX(odom.pose.pose.orientation.x);
//      q.setY(odom.pose.pose.orientation.y);
//      q.setZ(odom.pose.pose.orientation.z);
//      transform.setRotation(q);
//      transform.frame_id_="base_laser_link";
//      transform.child_frame_id_="global_laser";
//      br.sendTransform(transform);
      pub.publish(scan);
      odomFlag=false;
      scanFlag=false;
    }
    ros::spinOnce();
    r.sleep();
  }
}
